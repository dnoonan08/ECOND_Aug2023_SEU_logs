{"created": 0, "duration": 0, "exitcode": 1, "root": "/home/HGCAL_dev/SEU_Run/econd-sw/test_radiation", "environment": {"Python": "3.6.8", "Platform": "Linux-4.19.0-xilinx-v2019.2-aarch64-with-centos-7.9.2009-AltArch", "Packages": {"pytest": "7.0.1", "py": "1.11.0", "pluggy": "1.0.0"}, "Plugins": {"metadata": "1.11.0", "anyio": "3.3.1", "order": "1.1.0", "repeat": "0.9.1", "json-report": "1.5.0"}}, "summary": {"passed": 1, "failed": 2, "total": 3, "collected": 3}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test_proton_seu.py", "type": "Module"}]}, {"nodeid": "test_proton_seu.py", "outcome": "passed", "result": [{"nodeid": "test_proton_seu.py::test_prebeam_setup", "type": "Function", "lineno": 133}, {"nodeid": "test_proton_seu.py::test_beam_running", "type": "Function", "lineno": 287}, {"nodeid": "test_proton_seu.py::test_postbeam_checks", "type": "Function", "lineno": 441}]}], "tests": [{"nodeid": "test_proton_seu.py::test_prebeam_setup", "lineno": 133, "outcome": "passed", "keywords": ["test_prebeam_setup", "pytestmark", "order", "test_proton_seu.py", "test_radiation"], "setup": {"duration": 7.8748152310000705, "outcome": "passed", "stdout": "Failed on attempt 0 at write 171 of 279.\n"}, "metadata": {"daq_asic_before_beam": [], "daq_emu_before_beam": []}, "call": {"duration": 2.343520195999986, "outcome": "passed"}, "teardown": {"duration": 0.006430240999975467, "outcome": "passed"}}, {"nodeid": "test_proton_seu.py::test_beam_running", "lineno": 287, "outcome": "failed", "keywords": ["test_beam_running", "pytestmark", "order", "test_proton_seu.py", "test_radiation"], "setup": {"duration": 0.1160544409999602, "outcome": "passed"}, "metadata": {"word_err_count": [["2023-08-05 11:25:52.163271", 42992003, 0], ["2023-08-05 11:25:53.217090", 86198664, 0], ["2023-08-05 11:25:54.270799", 129401035, 0], ["2023-08-05 11:25:55.324525", 172603370, 0], ["2023-08-05 11:25:56.378187", 215803452, 0], ["2023-08-05 11:25:57.431974", 259008602, 0], ["2023-08-05 11:25:58.485580", 302206247, 0], ["2023-08-05 11:25:59.539680", 345425048, 0], ["2023-08-05 11:26:00.593541", 388632717, 0], ["2023-08-05 11:26:01.647207", 431832739, 0], ["2023-08-05 11:26:02.700762", 475028589, 0], ["2023-08-05 11:26:03.753573", 518193784, 0], ["2023-08-05 11:26:04.807262", 561394945, 0], ["2023-08-05 11:26:05.861105", 604602363, 1], ["2023-08-05 11:26:06.915306", 647824621, 1], ["2023-08-05 11:26:07.969117", 691030571, 2], ["2023-08-05 11:26:09.022938", 734237269, 2], ["2023-08-05 11:26:10.076776", 777444905, 3], ["2023-08-05 11:26:11.130646", 820653275, 3], ["2023-08-05 11:26:12.184477", 863860146, 3], ["2023-08-05 11:26:13.238205", 907062999, 3], ["2023-08-05 11:26:14.292501", 950289107, 3], ["2023-08-05 11:26:15.346853", 993517553, 3], ["2023-08-05 11:26:16.402682", 1036806256, 3], ["2023-08-05 11:26:17.456458", 1080011107, 3], ["2023-08-05 11:26:18.510093", 1123209998, 3], ["2023-08-05 11:26:19.563771", 1166411430, 3], ["2023-08-05 11:26:20.617460", 1209611952, 3], ["2023-08-05 11:26:21.671177", 1252814171, 3], ["2023-08-05 11:26:22.725348", 1296035289, 4], ["2023-08-05 11:26:23.778944", 1339232630, 4], ["2023-08-05 11:26:24.832643", 1382434270, 4], ["2023-08-05 11:26:25.886234", 1425631441, 4], ["2023-08-05 11:26:26.939829", 1468829223, 4], ["2023-08-05 11:26:27.993558", 1512031478, 4], ["2023-08-05 11:26:29.047175", 1555229723, 4], ["2023-08-05 11:26:30.100924", 1598433268, 4], ["2023-08-05 11:26:31.155034", 1641651767, 4], ["2023-08-05 11:26:32.208709", 1684852350, 4], ["2023-08-05 11:26:33.262257", 1728047691, 4], ["2023-08-05 11:26:34.315858", 1771245818, 5], ["2023-08-05 11:26:35.369574", 1814447665, 5], ["2023-08-05 11:26:36.423282", 1857649491, 5], ["2023-08-05 11:26:37.477031", 1900853146, 5], ["2023-08-05 11:26:38.531213", 1944074561, 5], ["2023-08-05 11:26:39.587295", 1987399873, 5], ["2023-08-05 11:26:40.695366", 2032804686, 6], ["2023-08-05 11:26:41.749574", 2076027141, 6], ["2023-08-05 11:26:42.804247", 2119268682, 6], ["2023-08-05 11:26:43.857634", 2162457601, 6], ["2023-08-05 11:26:44.911892", 2205681985, 7], ["2023-08-05 11:26:45.965574", 2248882944, 7], ["2023-08-05 11:26:47.020229", 2292123632, 7], ["2023-08-05 11:26:48.074186", 2335335862, 7], ["2023-08-05 11:26:49.128781", 2378574193, 7], ["2023-08-05 11:26:50.183338", 2421810987, 7], ["2023-08-05 11:26:51.237934", 2465049231, 7], ["2023-08-05 11:26:52.293579", 2508330779, 7], ["2023-08-05 11:26:53.347533", 2551542613, 8], ["2023-08-05 11:26:54.401605", 2594759699, 8], ["2023-08-05 11:26:55.455801", 2637982052, 8], ["2023-08-05 11:26:56.509783", 2681194642, 8], ["2023-08-05 11:26:57.563746", 2724408352, 8], ["2023-08-05 11:26:58.617573", 2767613983, 9], ["2023-08-05 11:26:59.672388", 2810861263, 9], ["2023-08-05 11:27:00.725569", 2854041723, 9], ["2023-08-05 11:27:01.779732", 2897262622, 9], ["2023-08-05 11:27:02.833841", 2940480732, 9], ["2023-08-05 11:27:03.905163", 2984404845, 9], ["2023-08-05 11:27:04.959113", 3027616672, 9], ["2023-08-05 11:27:06.013195", 3070834016, 9], ["2023-08-05 11:27:07.066834", 3114033220, 9], ["2023-08-05 11:27:08.120596", 3157237287, 9], ["2023-08-05 11:27:09.174707", 3200455807, 9], ["2023-08-05 11:27:10.228871", 3243676535, 12], ["2023-08-05 11:27:11.282546", 3286877187, 12], ["2023-08-05 11:27:12.336681", 3330096402, 12], ["2023-08-05 11:27:13.390734", 3373312651, 12], ["2023-08-05 11:27:14.444441", 3416514586, 12], ["2023-08-05 11:27:15.498076", 3459713538, 13], ["2023-08-05 11:27:16.551787", 3502916182, 13], ["2023-08-05 11:27:17.605718", 3546126603, 13], ["2023-08-05 11:27:18.659970", 3589350969, 13], ["2023-08-05 11:27:19.713564", 3632548213, 14], ["2023-08-05 11:27:20.767206", 3675747410, 14], ["2023-08-05 11:27:21.820903", 3718948974, 15], ["2023-08-05 11:27:22.874570", 3762149243, 15], ["2023-08-05 11:27:23.928248", 3805349824, 15], ["2023-08-05 11:27:24.981585", 3848536837, 15], ["2023-08-05 11:27:26.035834", 3891761342, 16], ["2023-08-05 11:27:27.090060", 3934984147, 16], ["2023-08-05 11:27:28.143941", 3978193110, 16], ["2023-08-05 11:27:29.197567", 4021391701, 16], ["2023-08-05 11:27:30.253212", 4064673072, 16], ["2023-08-05 11:27:31.306944", 4107875958, 16], ["2023-08-05 11:27:32.360571", 4151074623, 16], ["2023-08-05 11:27:33.413563", 4194247211, 16], ["2023-08-05 11:27:34.467251", 4237448304, 16], ["2023-08-05 11:27:35.520983", 4280651704, 16], ["2023-08-05 11:27:36.574834", 28891820, 16], ["2023-08-05 11:27:37.628767", 72102958, 16], ["2023-08-05 11:27:38.682617", 115310890, 16], ["2023-08-05 11:27:39.736829", 158533517, 16], ["2023-08-05 11:27:40.789572", 201695874, 16], ["2023-08-05 11:27:41.843791", 244919377, 16], ["2023-08-05 11:27:42.897521", 288121603, 16], ["2023-08-05 11:27:43.951223", 331323100, 16], ["2023-08-05 11:27:45.004843", 374521688, 17], ["2023-08-05 11:27:46.058468", 417720216, 17], ["2023-08-05 11:27:47.112159", 460921533, 17], ["2023-08-05 11:27:48.165567", 504111118, 17], ["2023-08-05 11:27:49.219155", 547308062, 18], ["2023-08-05 11:27:50.272821", 590508375, 18], ["2023-08-05 11:27:51.326390", 633704768, 18], ["2023-08-05 11:27:52.380088", 676906175, 18], ["2023-08-05 11:27:53.433743", 720105996, 18], ["2023-08-05 11:27:54.487473", 763308913, 18], ["2023-08-05 11:27:55.541168", 806510340, 19], ["2023-08-05 11:27:56.594932", 849714447, 19], ["2023-08-05 11:27:57.649204", 892939507, 19], ["2023-08-05 11:27:58.702954", 936143317, 19], ["2023-08-05 11:27:59.756669", 979345482, 19], ["2023-08-05 11:28:00.809569", 1022514370, 19], ["2023-08-05 11:28:01.863265", 1065715703, 19], ["2023-08-05 11:28:02.916917", 1108915449, 19], ["2023-08-05 11:28:03.971101", 1152136859, 19], ["2023-08-05 11:28:05.024916", 1195343294, 19], ["2023-08-05 11:28:06.079213", 1238569328, 19], ["2023-08-05 11:28:07.132916", 1281771203, 19], ["2023-08-05 11:28:08.186491", 1324967577, 19], ["2023-08-05 11:28:09.247974", 1368488396, 19], ["2023-08-05 11:28:10.301667", 1411689806, 19], ["2023-08-05 11:28:11.355377", 1454891655, 19], ["2023-08-05 11:28:12.408889", 1498085675, 19], ["2023-08-05 11:28:13.463015", 1541304815, 19], ["2023-08-05 11:28:14.517166", 1584524891, 19], ["2023-08-05 11:28:15.570807", 1627724055, 19], ["2023-08-05 11:28:16.624500", 1670925422, 19], ["2023-08-05 11:28:17.677568", 1714101132, 19], ["2023-08-05 11:28:18.731210", 1757300561, 19], ["2023-08-05 11:28:19.784861", 1800500035, 19], ["2023-08-05 11:28:20.838502", 1843699230, 19], ["2023-08-05 11:28:21.892627", 1886918332, 19], ["2023-08-05 11:28:22.946708", 1930135494, 19], ["2023-08-05 11:28:24.000344", 1973334585, 19], ["2023-08-05 11:28:25.054044", 2016536223, 19], ["2023-08-05 11:28:26.107841", 2059742247, 19]], "tmr_err_names": ["Aligner_Global_tmr_err_cnt_aligner", "ChAligner_00_tmr_err_cnt_chan_aligner", "ChAligner_00_tmr_err_cnt_chan_err", "ChAligner_00_tmr_err_cnt_chan_eprxgrp", "ChAligner_01_tmr_err_cnt_chan_aligner", "ChAligner_01_tmr_err_cnt_chan_err", "ChAligner_01_tmr_err_cnt_chan_eprxgrp", "ChAligner_02_tmr_err_cnt_chan_aligner", "ChAligner_02_tmr_err_cnt_chan_err", "ChAligner_02_tmr_err_cnt_chan_eprxgrp", "ChAligner_03_tmr_err_cnt_chan_aligner", "ChAligner_03_tmr_err_cnt_chan_err", "ChAligner_03_tmr_err_cnt_chan_eprxgrp", "ChAligner_04_tmr_err_cnt_chan_aligner", "ChAligner_04_tmr_err_cnt_chan_err", "ChAligner_04_tmr_err_cnt_chan_eprxgrp", "ChAligner_05_tmr_err_cnt_chan_aligner", "ChAligner_05_tmr_err_cnt_chan_err", "ChAligner_05_tmr_err_cnt_chan_eprxgrp", "ChAligner_06_tmr_err_cnt_chan_aligner", "ChAligner_06_tmr_err_cnt_chan_err", "ChAligner_06_tmr_err_cnt_chan_eprxgrp", "ChAligner_07_tmr_err_cnt_chan_aligner", "ChAligner_07_tmr_err_cnt_chan_err", "ChAligner_07_tmr_err_cnt_chan_eprxgrp", "ChAligner_08_tmr_err_cnt_chan_aligner", "ChAligner_08_tmr_err_cnt_chan_err", "ChAligner_08_tmr_err_cnt_chan_eprxgrp", "ChAligner_09_tmr_err_cnt_chan_aligner", "ChAligner_09_tmr_err_cnt_chan_err", "ChAligner_09_tmr_err_cnt_chan_eprxgrp", "ChAligner_10_tmr_err_cnt_chan_aligner", "ChAligner_10_tmr_err_cnt_chan_err", "ChAligner_10_tmr_err_cnt_chan_eprxgrp", "ChAligner_11_tmr_err_cnt_chan_aligner", "ChAligner_11_tmr_err_cnt_chan_err", "ChAligner_11_tmr_err_cnt_chan_eprxgrp", "ClocksAndResets_Global_tmr_err_cnt_clocks_and_resets", "ELinkProcessors_Global_tmr_err_cnt_elink_processors", "ERx_Global_tmr_err_cnt_erx", "ETx_Global_tmr_err_cnt_etx", "EprxGrpTop_Global_tmr_err_cnt_eprxgrp_top", "ErrTop_Global_tmr_err_cnt_err_top", "FCtrl_Global_tmr_err_cnt_fast_ctrl_decoder", "FormatterBuffer_Global_tmr_err_cnt_formatter_buffer", "Misc_TMRErrCnt_Global_tmr_err_cnt_misc", "PingPongSRAM_Global_tmr_err_cnt_bist_ctrl", "RocDaqCtrl_Global_tmr_err_cnt_roc_daq_ctrl", "Watchdog_Misc_Global_tmr_err_cnt_reset_request", "ZS_Global_tmr_err_cnt_zero_suppress", "ZSmOne_Global_tmr_err_cnt_zero_suppress_m"], "tmr_err_cnts": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 12, 16], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 5, 28, 35], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 6, 49, 51], [1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 1, 2, 2, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 3, 1, 1, 0, 1, 0, 0, 0, 6, 75, 64], [1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 2, 0, 2, 1, 0, 3, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 4, 2, 1, 0, 1, 0, 0, 0, 8, 110, 89], [1, 3, 0, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 2, 0, 1, 2, 2, 0, 2, 1, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 2, 2, 1, 4, 2, 1, 0, 1, 0, 0, 1, 8, 144, 120], [2, 4, 0, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 2, 0, 1, 3, 2, 0, 2, 1, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 3, 3, 1, 5, 2, 1, 0, 1, 0, 0, 3, 8, 172, 133], [2, 4, 0, 0, 2, 0, 0, 1, 0, 0, 3, 0, 0, 5, 0, 0, 2, 0, 1, 3, 2, 0, 2, 1, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 3, 3, 2, 5, 2, 1, 0, 1, 0, 0, 4, 11, 203, 149], [2, 7, 0, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 3, 0, 1, 5, 2, 0, 2, 1, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 4, 3, 3, 5, 2, 1, 0, 1, 0, 0, 5, 15, 234, 170], [2, 7, 0, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 5, 0, 0, 3, 0, 1, 5, 2, 0, 4, 1, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 4, 3, 3, 5, 2, 1, 0, 2, 0, 0, 5, 17, 6, 189], [3, 7, 0, 0, 2, 0, 0, 3, 0, 0, 3, 0, 0, 5, 0, 0, 5, 0, 1, 5, 2, 0, 4, 1, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 5, 3, 3, 5, 2, 1, 0, 2, 0, 0, 5, 19, 35, 200], [3, 7, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 1, 6, 2, 0, 4, 1, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 6, 3, 3, 5, 2, 1, 0, 2, 0, 0, 5, 22, 65, 213], [4, 7, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 1, 6, 2, 0, 5, 1, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 6, 4, 3, 8, 2, 1, 0, 3, 0, 0, 6, 22, 97, 230], [5, 7, 0, 0, 3, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 7, 0, 1, 6, 2, 1, 5, 1, 0, 4, 0, 0, 3, 0, 0, 2, 0, 0, 0, 1, 0, 6, 4, 5, 8, 2, 1, 1, 3, 0, 0, 6, 22, 118, 254], [5, 7, 0, 0, 3, 0, 1, 3, 0, 0, 4, 0, 0, 5, 0, 0, 7, 0, 1, 6, 2, 1, 5, 1, 0, 4, 0, 0, 3, 0, 0, 3, 0, 0, 0, 1, 0, 6, 5, 7, 9, 2, 1, 1, 4, 0, 0, 6, 25, 141, 18], [5, 9, 0, 0, 3, 0, 1, 4, 0, 0, 5, 0, 0, 5, 0, 0, 8, 0, 1, 6, 2, 1, 5, 1, 0, 4, 0, 0, 3, 0, 0, 4, 0, 0, 0, 1, 0, 7, 5, 7, 10, 2, 1, 1, 5, 0, 0, 6, 29, 172, 33], [5, 9, 0, 0, 3, 0, 1, 4, 0, 0, 5, 0, 0, 6, 0, 0, 8, 0, 1, 6, 2, 1, 5, 1, 0, 4, 0, 0, 3, 1, 0, 4, 0, 0, 1, 1, 0, 7, 5, 8, 11, 2, 1, 1, 6, 0, 0, 6, 32, 200, 49], [6, 11, 0, 0, 3, 0, 1, 4, 0, 0, 5, 0, 0, 6, 0, 0, 8, 0, 1, 6, 2, 1, 5, 1, 0, 4, 0, 0, 4, 1, 0, 6, 0, 0, 1, 1, 0, 8, 6, 8, 11, 2, 1, 1, 6, 0, 0, 6, 34, 224, 68], [6, 13, 0, 0, 4, 0, 1, 5, 0, 0, 8, 0, 0, 6, 0, 0, 8, 0, 1, 6, 2, 1, 5, 1, 0, 4, 0, 0, 4, 1, 0, 6, 0, 0, 2, 1, 0, 9, 7, 9, 11, 2, 1, 1, 6, 0, 0, 7, 34, 248, 86], [8, 13, 0, 0, 4, 0, 1, 6, 0, 0, 8, 0, 0, 6, 0, 0, 8, 0, 1, 6, 2, 1, 7, 1, 0, 5, 0, 0, 4, 1, 0, 6, 0, 0, 2, 1, 0, 11, 7, 9, 11, 2, 1, 1, 6, 0, 0, 7, 35, 24, 104], [8, 14, 0, 0, 4, 0, 1, 7, 0, 0, 9, 0, 0, 6, 0, 1, 9, 0, 1, 6, 2, 1, 7, 1, 0, 5, 0, 0, 5, 1, 0, 6, 0, 0, 3, 1, 0, 11, 7, 9, 12, 2, 1, 1, 7, 0, 0, 7, 38, 44, 121], [10, 14, 0, 0, 4, 0, 1, 7, 0, 0, 9, 0, 0, 7, 0, 1, 9, 0, 1, 6, 2, 1, 7, 1, 0, 5, 0, 0, 6, 1, 0, 6, 1, 0, 3, 1, 0, 12, 8, 9, 13, 2, 1, 1, 7, 0, 0, 7, 40, 72, 139], [11, 14, 0, 0, 5, 0, 1, 7, 0, 0, 9, 0, 0, 7, 0, 1, 9, 0, 1, 8, 2, 1, 7, 1, 0, 5, 0, 0, 7, 1, 0, 6, 1, 0, 3, 1, 0, 12, 8, 9, 14, 2, 1, 1, 7, 0, 0, 7, 41, 100, 154], [12, 15, 0, 0, 5, 0, 1, 7, 0, 0, 10, 0, 0, 7, 0, 1, 11, 0, 1, 8, 2, 1, 7, 1, 0, 6, 0, 0, 8, 1, 0, 6, 1, 0, 3, 1, 1, 12, 8, 9, 14, 2, 1, 1, 7, 0, 0, 7, 41, 129, 170], [12, 15, 0, 0, 5, 0, 1, 7, 0, 0, 11, 0, 0, 7, 0, 1, 13, 0, 1, 8, 2, 1, 8, 1, 0, 6, 0, 0, 9, 1, 0, 6, 1, 0, 4, 1, 1, 12, 8, 9, 14, 2, 1, 1, 7, 0, 0, 7, 44, 149, 183], [12, 15, 0, 0, 5, 0, 1, 7, 0, 0, 12, 0, 0, 7, 0, 1, 13, 0, 1, 8, 3, 1, 8, 1, 0, 6, 0, 0, 9, 1, 0, 7, 1, 0, 4, 1, 1, 13, 9, 10, 15, 2, 2, 1, 7, 0, 0, 7, 45, 174, 206], [13, 15, 0, 0, 5, 0, 1, 7, 0, 0, 13, 0, 0, 7, 0, 1, 13, 0, 1, 8, 3, 1, 8, 1, 0, 7, 0, 0, 9, 1, 0, 7, 1, 0, 4, 1, 1, 13, 10, 12, 15, 2, 2, 1, 7, 0, 0, 8, 47, 201, 226], [14, 15, 0, 0, 5, 0, 1, 7, 0, 0, 13, 0, 0, 7, 0, 1, 13, 0, 1, 9, 3, 1, 8, 1, 0, 7, 0, 0, 9, 1, 0, 7, 1, 1, 4, 1, 1, 14, 10, 13, 15, 2, 2, 1, 7, 0, 0, 10, 48, 217, 240], [14, 15, 0, 0, 6, 0, 1, 7, 0, 0, 13, 0, 0, 7, 0, 1, 13, 0, 1, 10, 3, 1, 8, 1, 0, 7, 0, 0, 9, 1, 0, 8, 1, 1, 4, 1, 1, 14, 10, 13, 17, 2, 2, 1, 8, 0, 0, 10, 49, 242, 10], [14, 16, 0, 0, 6, 0, 1, 7, 0, 0, 13, 0, 0, 7, 0, 1, 13, 0, 1, 10, 3, 1, 8, 1, 0, 7, 0, 0, 10, 1, 0, 8, 1, 1, 5, 1, 1, 14, 11, 14, 17, 2, 2, 1, 8, 1, 0, 11, 50, 13, 26], [14, 17, 0, 0, 6, 0, 1, 7, 0, 0, 14, 0, 0, 7, 0, 1, 13, 0, 1, 10, 3, 1, 8, 1, 0, 7, 0, 0, 11, 1, 0, 9, 1, 1, 7, 1, 1, 15, 11, 16, 19, 2, 2, 1, 9, 1, 0, 12, 51, 34, 38], [14, 17, 0, 0, 7, 0, 1, 7, 0, 0, 16, 0, 0, 7, 0, 1, 14, 0, 1, 10, 3, 1, 8, 1, 0, 8, 0, 0, 11, 1, 0, 9, 1, 1, 8, 1, 1, 16, 12, 16, 19, 2, 3, 1, 9, 1, 0, 12, 51, 72, 56], [15, 17, 0, 0, 7, 0, 1, 9, 0, 0, 17, 0, 0, 7, 0, 1, 14, 0, 1, 10, 3, 1, 10, 1, 0, 9, 0, 0, 12, 1, 0, 10, 1, 1, 8, 1, 1, 16, 13, 16, 19, 2, 3, 1, 9, 1, 0, 13, 53, 92, 69], [15, 18, 0, 0, 8, 0, 1, 9, 0, 0, 17, 0, 0, 7, 0, 1, 14, 0, 1, 10, 3, 1, 10, 1, 0, 9, 0, 0, 12, 1, 0, 10, 1, 1, 9, 1, 1, 16, 14, 17, 20, 2, 3, 2, 10, 1, 0, 13, 53, 124, 93], [15, 18, 0, 0, 9, 0, 1, 9, 0, 0, 17, 0, 0, 7, 0, 1, 14, 0, 1, 11, 3, 1, 10, 1, 0, 10, 0, 0, 12, 1, 0, 10, 1, 1, 9, 1, 1, 16, 15, 17, 20, 2, 3, 2, 10, 1, 0, 13, 57, 157, 116], [16, 18, 0, 0, 11, 0, 1, 9, 0, 0, 17, 0, 0, 7, 0, 1, 14, 0, 1, 11, 3, 1, 11, 1, 0, 10, 0, 0, 12, 1, 0, 10, 1, 1, 9, 1, 1, 16, 16, 17, 21, 2, 3, 2, 10, 1, 0, 13, 58, 178, 141], [16, 18, 0, 0, 11, 0, 1, 9, 0, 0, 18, 0, 0, 7, 0, 1, 14, 0, 1, 11, 3, 1, 11, 1, 0, 10, 0, 0, 12, 1, 0, 10, 1, 1, 9, 1, 1, 16, 18, 17, 21, 3, 3, 2, 11, 1, 0, 14, 58, 204, 163], [17, 19, 0, 0, 12, 0, 1, 9, 0, 0, 18, 0, 0, 7, 0, 1, 14, 0, 1, 11, 3, 1, 11, 1, 0, 10, 0, 0, 13, 1, 0, 10, 1, 1, 9, 1, 1, 17, 18, 17, 22, 3, 4, 2, 11, 1, 0, 14, 58, 225, 186], [18, 19, 0, 0, 12, 0, 1, 10, 0, 0, 18, 0, 0, 7, 0, 1, 15, 0, 1, 11, 3, 1, 11, 1, 0, 11, 0, 1, 13, 1, 0, 10, 1, 1, 9, 1, 1, 19, 18, 17, 22, 3, 4, 2, 11, 1, 0, 14, 59, 252, 203], [18, 20, 0, 0, 13, 0, 1, 10, 1, 0, 18, 0, 0, 8, 0, 1, 16, 0, 1, 11, 3, 1, 11, 1, 0, 12, 0, 1, 15, 1, 0, 10, 1, 1, 9, 1, 1, 19, 19, 17, 22, 3, 4, 2, 11, 1, 0, 14, 62, 23, 219], [18, 21, 0, 0, 13, 0, 1, 10, 1, 0, 18, 0, 0, 8, 0, 1, 17, 0, 1, 11, 3, 1, 13, 1, 0, 13, 0, 1, 15, 1, 0, 11, 1, 1, 9, 1, 1, 19, 19, 17, 22, 4, 4, 2, 11, 1, 0, 14, 66, 45, 238], [20, 22, 0, 0, 13, 0, 1, 11, 1, 0, 18, 0, 0, 8, 0, 1, 19, 0, 2, 11, 3, 1, 14, 1, 0, 14, 0, 1, 16, 1, 0, 11, 1, 1, 9, 1, 1, 21, 20, 17, 22, 4, 4, 3, 12, 1, 0, 15, 67, 66, 254], [20, 23, 0, 0, 14, 0, 1, 11, 1, 0, 19, 0, 0, 8, 0, 1, 19, 0, 2, 11, 3, 1, 15, 1, 0, 14, 0, 1, 18, 1, 0, 11, 1, 1, 9, 1, 1, 23, 20, 17, 24, 4, 4, 3, 12, 1, 0, 16, 68, 91, 24], [23, 23, 0, 0, 14, 0, 1, 11, 1, 0, 19, 0, 0, 8, 0, 1, 19, 0, 2, 11, 3, 1, 15, 1, 0, 16, 0, 1, 18, 1, 0, 11, 1, 1, 9, 1, 1, 23, 21, 17, 24, 4, 4, 3, 12, 1, 0, 17, 68, 120, 46], [23, 23, 0, 0, 14, 0, 1, 11, 1, 0, 19, 0, 0, 9, 0, 1, 19, 0, 2, 11, 3, 1, 15, 1, 0, 16, 0, 1, 18, 1, 0, 11, 1, 1, 9, 1, 1, 23, 22, 17, 24, 4, 4, 3, 12, 1, 0, 17, 69, 144, 66], [23, 25, 0, 0, 15, 0, 1, 11, 1, 0, 19, 0, 0, 9, 0, 1, 19, 0, 2, 11, 3, 1, 15, 1, 0, 18, 0, 1, 19, 1, 0, 11, 1, 1, 9, 1, 1, 24, 22, 18, 24, 4, 4, 3, 12, 1, 0, 17, 71, 171, 86], [23, 25, 0, 1, 15, 0, 1, 12, 1, 0, 19, 0, 0, 9, 0, 1, 19, 0, 2, 12, 3, 1, 15, 1, 0, 19, 0, 1, 21, 1, 0, 11, 1, 1, 10, 1, 1, 24, 26, 18, 25, 4, 4, 3, 12, 1, 0, 17, 72, 195, 109], [23, 25, 0, 1, 17, 0, 1, 13, 1, 0, 19, 0, 0, 9, 0, 1, 19, 0, 2, 12, 3, 1, 15, 1, 0, 19, 0, 1, 21, 1, 0, 12, 1, 1, 11, 1, 1, 24, 26, 18, 25, 4, 4, 3, 12, 1, 0, 17, 72, 226, 134], [24, 25, 0, 1, 17, 0, 2, 13, 1, 0, 20, 0, 0, 9, 0, 1, 19, 0, 2, 12, 3, 1, 17, 1, 0, 19, 0, 1, 21, 1, 0, 12, 1, 1, 11, 1, 1, 24, 27, 20, 26, 4, 4, 3, 12, 1, 0, 18, 75, 250, 159], [25, 26, 0, 1, 17, 0, 2, 13, 2, 0, 20, 0, 0, 9, 0, 1, 22, 0, 2, 12, 3, 1, 17, 1, 0, 20, 0, 1, 21, 1, 1, 12, 1, 1, 12, 1, 1, 25, 27, 20, 28, 5, 4, 3, 12, 1, 0, 18, 75, 24, 179], [25, 26, 0, 1, 18, 0, 2, 13, 2, 0, 20, 0, 0, 9, 0, 1, 24, 0, 2, 13, 3, 1, 20, 1, 0, 20, 0, 1, 21, 1, 1, 12, 1, 1, 12, 1, 1, 26, 28, 20, 29, 5, 4, 3, 12, 1, 0, 18, 77, 40, 198], [26, 26, 0, 1, 18, 0, 2, 14, 2, 0, 20, 0, 0, 10, 0, 1, 25, 0, 2, 13, 3, 1, 21, 1, 0, 20, 0, 1, 22, 1, 1, 12, 1, 1, 14, 1, 1, 26, 28, 21, 30, 5, 4, 3, 12, 1, 0, 19, 78, 63, 218], [27, 26, 0, 1, 18, 0, 2, 14, 2, 0, 20, 0, 0, 11, 0, 1, 25, 0, 2, 14, 3, 1, 21, 1, 0, 20, 0, 1, 22, 1, 1, 12, 1, 1, 14, 1, 1, 26, 30, 21, 31, 5, 4, 3, 12, 1, 0, 20, 78, 87, 237], [27, 26, 0, 1, 19, 0, 2, 14, 2, 0, 20, 0, 0, 11, 0, 1, 25, 0, 2, 14, 3, 1, 21, 1, 0, 20, 0, 1, 23, 1, 1, 13, 1, 1, 16, 1, 1, 27, 31, 21, 31, 5, 4, 3, 12, 1, 0, 20, 82, 123, 6], [27, 28, 0, 1, 19, 0, 2, 14, 2, 0, 21, 0, 0, 11, 0, 1, 25, 0, 2, 14, 3, 1, 21, 1, 0, 20, 0, 1, 23, 1, 1, 13, 1, 1, 16, 1, 1, 28, 32, 22, 33, 5, 4, 3, 12, 1, 0, 20, 83, 151, 22], [29, 28, 0, 1, 19, 0, 2, 16, 2, 0, 23, 0, 0, 12, 0, 1, 27, 0, 2, 15, 3, 1, 24, 1, 0, 20, 0, 1, 23, 1, 1, 13, 1, 1, 16, 1, 1, 28, 33, 22, 34, 5, 4, 3, 12, 1, 0, 20, 83, 180, 40], [30, 29, 0, 1, 19, 0, 2, 16, 2, 0, 23, 0, 0, 12, 0, 1, 28, 0, 2, 16, 3, 1, 24, 1, 0, 20, 0, 1, 23, 1, 1, 13, 1, 1, 16, 1, 1, 29, 34, 24, 34, 5, 4, 3, 13, 1, 0, 21, 85, 205, 54], [30, 29, 0, 1, 19, 0, 2, 16, 2, 0, 23, 0, 0, 12, 0, 1, 29, 0, 2, 16, 3, 1, 24, 1, 0, 20, 0, 1, 23, 1, 1, 13, 1, 1, 17, 1, 1, 29, 35, 24, 34, 5, 4, 3, 14, 1, 0, 22, 86, 225, 72], [31, 29, 0, 1, 19, 0, 2, 17, 2, 0, 24, 0, 0, 12, 0, 1, 29, 0, 2, 16, 3, 1, 24, 1, 0, 20, 0, 1, 24, 1, 1, 13, 1, 1, 18, 1, 1, 30, 36, 25, 35, 5, 4, 3, 14, 1, 0, 22, 88, 246, 93], [31, 29, 0, 1, 20, 0, 2, 17, 2, 0, 25, 0, 0, 13, 0, 1, 29, 0, 2, 16, 3, 1, 24, 1, 0, 21, 0, 1, 24, 1, 1, 13, 1, 1, 19, 1, 1, 30, 38, 25, 35, 6, 5, 3, 15, 1, 0, 22, 90, 5, 106], [31, 29, 0, 1, 20, 0, 2, 18, 2, 0, 25, 0, 0, 14, 0, 1, 29, 0, 2, 16, 3, 1, 25, 1, 0, 21, 0, 1, 24, 1, 1, 13, 1, 1, 20, 1, 1, 30, 38, 26, 36, 6, 5, 3, 16, 1, 0, 22, 90, 24, 119], [31, 29, 0, 1, 21, 0, 2, 18, 2, 0, 26, 0, 0, 14, 0, 1, 29, 1, 2, 16, 3, 1, 25, 1, 0, 22, 0, 1, 24, 1, 1, 13, 1, 1, 20, 1, 1, 31, 38, 28, 36, 6, 6, 3, 16, 1, 0, 22, 92, 39, 137], [31, 30, 0, 1, 21, 0, 2, 18, 2, 0, 26, 0, 0, 14, 0, 1, 29, 1, 2, 16, 3, 1, 25, 1, 0, 23, 0, 1, 24, 1, 1, 15, 1, 1, 20, 1, 1, 34, 38, 28, 39, 6, 6, 3, 16, 1, 0, 22, 92, 69, 155], [31, 30, 0, 1, 21, 0, 2, 18, 2, 0, 26, 0, 0, 14, 0, 2, 30, 1, 2, 16, 3, 1, 26, 2, 0, 23, 0, 1, 24, 1, 1, 16, 1, 1, 20, 1, 1, 34, 39, 29, 41, 6, 6, 3, 16, 1, 0, 23, 94, 102, 174], [31, 30, 0, 1, 22, 0, 2, 19, 2, 0, 26, 0, 0, 14, 0, 2, 31, 1, 2, 17, 3, 1, 26, 3, 0, 25, 0, 1, 25, 1, 1, 16, 1, 1, 21, 1, 1, 35, 39, 30, 41, 6, 6, 3, 18, 1, 0, 24, 95, 133, 195], [32, 31, 0, 1, 23, 0, 2, 19, 2, 0, 26, 0, 0, 14, 0, 2, 32, 1, 2, 17, 3, 1, 26, 3, 0, 25, 0, 1, 25, 1, 1, 18, 1, 1, 21, 1, 1, 35, 39, 30, 42, 6, 7, 3, 19, 1, 1, 24, 97, 156, 205], [32, 31, 0, 1, 23, 0, 2, 21, 2, 0, 26, 0, 0, 14, 0, 2, 32, 1, 2, 18, 3, 1, 26, 3, 0, 25, 0, 1, 27, 1, 1, 19, 1, 1, 21, 1, 1, 35, 39, 31, 43, 6, 7, 3, 20, 1, 1, 24, 100, 175, 224], [32, 31, 0, 1, 24, 0, 2, 21, 2, 0, 26, 0, 0, 15, 0, 2, 32, 1, 2, 18, 3, 1, 26, 3, 0, 25, 0, 1, 27, 1, 1, 20, 1, 1, 21, 1, 1, 35, 39, 31, 43, 6, 7, 3, 20, 1, 1, 24, 101, 218, 236], [32, 31, 0, 1, 24, 0, 2, 21, 2, 0, 26, 0, 0, 15, 0, 2, 32, 1, 2, 18, 3, 1, 26, 3, 0, 26, 0, 1, 29, 1, 1, 20, 1, 1, 21, 1, 1, 35, 39, 31, 43, 6, 7, 3, 20, 1, 1, 24, 102, 239, 3], [32, 32, 0, 1, 24, 0, 2, 21, 2, 0, 26, 0, 0, 16, 0, 2, 32, 1, 2, 19, 3, 1, 26, 3, 0, 27, 0, 1, 29, 1, 1, 20, 1, 1, 21, 1, 1, 37, 40, 32, 43, 6, 7, 3, 20, 1, 1, 24, 104, 13, 29], [32, 32, 0, 1, 24, 0, 2, 21, 2, 0, 28, 0, 0, 16, 0, 2, 33, 1, 2, 20, 3, 1, 26, 3, 0, 28, 0, 1, 29, 1, 1, 20, 1, 1, 22, 1, 1, 38, 40, 32, 43, 6, 7, 3, 21, 1, 1, 24, 108, 46, 41], [33, 32, 0, 1, 24, 0, 2, 21, 2, 0, 28, 0, 0, 16, 0, 2, 33, 1, 2, 20, 3, 1, 26, 3, 0, 28, 0, 1, 29, 1, 1, 20, 1, 1, 22, 1, 1, 39, 41, 32, 43, 6, 7, 4, 21, 1, 1, 24, 109, 80, 63], [33, 33, 0, 1, 24, 0, 2, 21, 2, 0, 28, 0, 0, 17, 0, 2, 33, 1, 2, 20, 3, 1, 26, 4, 0, 28, 0, 1, 29, 1, 1, 20, 1, 1, 22, 1, 1, 39, 43, 33, 44, 6, 7, 4, 21, 1, 1, 24, 111, 110, 74], [33, 33, 0, 1, 24, 0, 2, 21, 2, 0, 30, 0, 0, 17, 0, 2, 33, 1, 2, 21, 3, 1, 26, 4, 0, 28, 0, 1, 29, 1, 1, 20, 1, 1, 22, 1, 1, 39, 44, 33, 44, 6, 7, 4, 22, 1, 1, 24, 114, 142, 95], [33, 33, 0, 1, 24, 0, 2, 21, 2, 0, 30, 0, 0, 19, 0, 2, 33, 1, 2, 21, 3, 1, 26, 4, 0, 28, 0, 1, 29, 1, 1, 21, 1, 1, 25, 1, 1, 39, 44, 33, 44, 6, 7, 4, 23, 1, 1, 24, 114, 156, 107], [33, 34, 0, 1, 24, 0, 2, 21, 2, 0, 30, 0, 0, 20, 0, 2, 33, 1, 2, 21, 3, 2, 27, 4, 0, 28, 0, 1, 29, 1, 1, 21, 1, 1, 25, 1, 1, 40, 44, 33, 44, 6, 7, 4, 23, 1, 1, 24, 117, 180, 124], [33, 34, 0, 1, 24, 0, 2, 21, 2, 0, 31, 0, 0, 20, 0, 2, 35, 1, 2, 22, 3, 2, 27, 4, 0, 28, 0, 1, 29, 1, 1, 21, 1, 1, 25, 1, 1, 40, 45, 34, 44, 6, 7, 4, 25, 1, 1, 24, 118, 203, 139], [34, 34, 0, 1, 25, 0, 2, 22, 2, 0, 32, 0, 0, 20, 0, 2, 35, 1, 2, 22, 3, 2, 28, 4, 0, 28, 0, 1, 29, 1, 2, 21, 1, 1, 26, 1, 1, 40, 46, 35, 44, 6, 7, 4, 26, 1, 1, 24, 122, 227, 161], [35, 35, 0, 1, 26, 0, 2, 22, 2, 0, 32, 0, 0, 20, 0, 2, 36, 1, 2, 24, 3, 2, 28, 4, 0, 28, 0, 1, 29, 1, 2, 21, 1, 1, 26, 1, 1, 40, 46, 35, 44, 6, 7, 4, 26, 1, 1, 24, 122, 11, 176], [35, 35, 0, 1, 27, 0, 2, 22, 2, 0, 33, 0, 0, 20, 0, 2, 36, 1, 2, 25, 3, 2, 28, 4, 0, 29, 0, 1, 29, 1, 2, 22, 1, 1, 26, 1, 2, 40, 46, 35, 44, 6, 7, 4, 26, 1, 1, 25, 122, 32, 194], [35, 35, 0, 1, 27, 0, 2, 22, 2, 0, 34, 0, 0, 20, 0, 2, 36, 1, 2, 25, 3, 2, 28, 4, 0, 30, 0, 1, 29, 1, 2, 22, 1, 1, 26, 1, 2, 42, 46, 35, 44, 6, 7, 4, 27, 1, 1, 25, 123, 58, 203], [37, 35, 0, 1, 28, 0, 2, 22, 2, 1, 34, 0, 0, 20, 0, 2, 36, 1, 2, 25, 3, 2, 29, 4, 0, 30, 0, 1, 29, 1, 2, 22, 1, 1, 26, 1, 2, 43, 46, 35, 45, 6, 7, 4, 27, 1, 1, 25, 124, 86, 232], [37, 36, 0, 1, 30, 0, 2, 22, 2, 1, 35, 0, 0, 20, 0, 2, 36, 1, 2, 27, 3, 2, 30, 4, 0, 30, 0, 1, 29, 1, 2, 22, 1, 1, 26, 1, 2, 44, 47, 35, 45, 6, 7, 4, 27, 1, 1, 25, 125, 116, 2], [37, 37, 1, 1, 30, 0, 2, 22, 2, 1, 35, 0, 0, 20, 0, 2, 36, 1, 2, 27, 3, 2, 30, 4, 0, 30, 0, 1, 30, 1, 2, 23, 1, 1, 26, 1, 2, 44, 47, 35, 45, 6, 7, 4, 28, 1, 1, 25, 128, 134, 14], [37, 37, 1, 1, 30, 0, 2, 22, 2, 1, 35, 0, 0, 21, 0, 2, 37, 1, 2, 29, 3, 2, 30, 4, 0, 30, 0, 1, 30, 1, 2, 23, 1, 1, 26, 1, 2, 46, 48, 36, 45, 6, 7, 4, 29, 1, 1, 25, 133, 172, 39], [38, 37, 1, 1, 30, 0, 2, 22, 2, 1, 35, 0, 0, 21, 0, 2, 37, 1, 2, 29, 3, 2, 31, 4, 0, 31, 0, 1, 30, 1, 2, 23, 1, 1, 27, 1, 2, 46, 49, 36, 46, 6, 8, 4, 29, 1, 1, 25, 133, 195, 68], [40, 37, 1, 1, 30, 0, 2, 22, 2, 1, 36, 0, 0, 22, 0, 2, 37, 1, 2, 29, 3, 2, 32, 4, 0, 31, 0, 1, 30, 1, 2, 23, 1, 1, 27, 1, 2, 46, 49, 36, 46, 6, 8, 4, 31, 1, 1, 25, 134, 234, 82], [41, 38, 1, 1, 30, 0, 2, 22, 2, 1, 36, 0, 0, 23, 0, 2, 37, 1, 2, 30, 3, 2, 32, 4, 0, 31, 0, 1, 30, 1, 2, 24, 1, 1, 28, 1, 2, 48, 49, 36, 46, 6, 8, 4, 32, 1, 1, 25, 138, 5, 102], [41, 38, 1, 1, 30, 0, 2, 22, 2, 1, 37, 0, 1, 23, 0, 2, 37, 1, 2, 30, 3, 2, 32, 4, 0, 31, 0, 1, 32, 1, 2, 24, 1, 1, 28, 1, 2, 48, 50, 36, 46, 6, 8, 4, 33, 1, 1, 25, 138, 30, 120], [41, 38, 1, 1, 32, 0, 2, 23, 2, 1, 38, 0, 1, 24, 0, 3, 37, 1, 2, 30, 3, 3, 32, 4, 0, 31, 0, 1, 32, 1, 2, 24, 1, 1, 29, 1, 2, 49, 50, 36, 47, 6, 8, 4, 33, 1, 1, 25, 140, 54, 138], [41, 38, 1, 1, 33, 0, 2, 23, 2, 1, 38, 0, 1, 25, 0, 3, 37, 1, 2, 30, 3, 3, 32, 4, 0, 31, 0, 1, 32, 1, 2, 24, 1, 1, 29, 1, 2, 49, 50, 36, 47, 6, 8, 5, 33, 1, 1, 26, 140, 67, 155], [41, 39, 1, 1, 33, 0, 2, 23, 2, 1, 38, 0, 1, 25, 0, 3, 37, 1, 3, 30, 3, 3, 32, 4, 0, 32, 0, 1, 32, 1, 2, 25, 1, 1, 29, 1, 2, 50, 50, 36, 48, 6, 8, 5, 33, 1, 1, 27, 142, 95, 182], [41, 39, 1, 1, 33, 0, 2, 24, 2, 1, 38, 0, 1, 25, 0, 3, 37, 1, 3, 31, 3, 3, 32, 4, 0, 32, 0, 1, 33, 1, 2, 25, 1, 1, 29, 1, 2, 50, 50, 36, 51, 7, 8, 5, 33, 1, 1, 27, 145, 120, 206], [42, 39, 1, 1, 33, 0, 2, 25, 2, 1, 38, 0, 1, 25, 0, 3, 37, 1, 3, 32, 3, 3, 33, 5, 0, 32, 0, 1, 34, 1, 2, 26, 2, 1, 29, 1, 2, 50, 51, 37, 51, 7, 8, 5, 33, 1, 1, 28, 147, 147, 226], [43, 39, 1, 1, 33, 0, 2, 25, 2, 1, 38, 0, 1, 25, 0, 3, 38, 1, 3, 32, 3, 3, 33, 5, 0, 33, 0, 1, 34, 1, 2, 26, 2, 1, 30, 1, 2, 50, 53, 37, 52, 7, 8, 5, 34, 1, 1, 28, 148, 161, 243], [43, 40, 1, 1, 33, 0, 2, 25, 2, 1, 38, 0, 1, 26, 0, 3, 38, 1, 3, 32, 3, 3, 33, 5, 0, 33, 0, 1, 34, 1, 2, 27, 3, 1, 30, 1, 2, 50, 53, 37, 52, 7, 8, 5, 34, 1, 1, 28, 148, 192, 7], [43, 42, 1, 1, 33, 0, 2, 25, 2, 1, 38, 0, 1, 26, 0, 3, 38, 1, 3, 32, 3, 3, 33, 5, 0, 33, 0, 1, 34, 1, 2, 27, 3, 1, 31, 1, 2, 52, 53, 39, 53, 7, 8, 6, 35, 1, 1, 29, 152, 220, 31], [44, 42, 1, 1, 33, 0, 2, 25, 2, 1, 39, 0, 1, 26, 0, 3, 38, 1, 3, 34, 3, 3, 34, 5, 0, 34, 0, 1, 35, 1, 2, 27, 3, 1, 31, 1, 2, 53, 53, 39, 53, 7, 8, 6, 35, 1, 1, 29, 154, 241, 46], [44, 42, 1, 2, 34, 0, 2, 25, 2, 1, 39, 0, 1, 26, 0, 4, 38, 1, 3, 34, 3, 3, 34, 5, 0, 34, 0, 1, 35, 1, 2, 29, 3, 1, 32, 1, 2, 54, 54, 39, 54, 7, 8, 6, 35, 1, 1, 29, 156, 10, 66], [45, 43, 1, 2, 34, 0, 2, 25, 2, 1, 40, 0, 2, 27, 0, 4, 39, 1, 3, 34, 3, 3, 35, 5, 0, 34, 0, 1, 35, 1, 2, 30, 3, 1, 33, 1, 2, 54, 54, 39, 54, 7, 8, 6, 36, 1, 2, 29, 162, 34, 83], [45, 43, 1, 2, 34, 0, 2, 25, 2, 1, 40, 0, 2, 27, 0, 4, 39, 1, 3, 34, 3, 3, 35, 5, 0, 34, 0, 1, 35, 1, 2, 30, 3, 1, 34, 1, 2, 56, 54, 39, 54, 7, 8, 7, 37, 1, 2, 29, 166, 55, 99], [45, 43, 1, 2, 34, 0, 2, 25, 2, 1, 40, 0, 2, 29, 0, 4, 39, 1, 3, 35, 3, 3, 36, 5, 0, 35, 0, 1, 35, 1, 2, 31, 3, 1, 34, 1, 2, 57, 56, 39, 56, 7, 8, 7, 40, 1, 2, 29, 169, 72, 115], [46, 44, 1, 2, 35, 0, 2, 26, 2, 1, 40, 0, 2, 29, 0, 4, 39, 1, 3, 35, 3, 3, 36, 5, 0, 35, 0, 1, 36, 1, 2, 31, 3, 1, 34, 1, 2, 60, 57, 39, 56, 7, 8, 7, 40, 1, 2, 29, 170, 109, 125], [48, 46, 1, 2, 35, 0, 2, 27, 2, 1, 40, 0, 2, 29, 0, 5, 39, 1, 3, 36, 3, 3, 36, 5, 0, 35, 1, 1, 36, 1, 2, 31, 3, 2, 36, 1, 2, 60, 60, 40, 56, 7, 8, 7, 42, 1, 2, 29, 170, 137, 138], [48, 47, 1, 2, 36, 0, 2, 27, 2, 1, 40, 0, 2, 29, 0, 5, 39, 1, 3, 36, 3, 3, 36, 5, 0, 35, 1, 1, 38, 1, 2, 31, 3, 2, 37, 1, 2, 61, 60, 40, 56, 7, 8, 7, 43, 1, 2, 29, 170, 162, 161], [49, 47, 1, 2, 36, 0, 2, 27, 2, 1, 40, 0, 2, 29, 0, 5, 39, 1, 3, 36, 3, 3, 36, 5, 0, 35, 1, 1, 38, 1, 2, 32, 3, 2, 38, 1, 2, 61, 61, 40, 56, 7, 8, 7, 43, 1, 2, 30, 173, 193, 176], [49, 47, 1, 2, 38, 0, 2, 27, 2, 1, 40, 0, 2, 29, 0, 5, 39, 1, 3, 36, 3, 3, 36, 5, 0, 35, 1, 1, 38, 1, 2, 32, 3, 2, 38, 1, 2, 61, 61, 41, 58, 7, 8, 7, 43, 1, 2, 30, 174, 213, 194], [49, 48, 1, 2, 39, 0, 2, 28, 2, 1, 40, 0, 2, 30, 0, 5, 39, 1, 3, 36, 3, 3, 36, 5, 0, 35, 1, 1, 38, 1, 2, 32, 3, 2, 39, 1, 2, 61, 61, 41, 58, 7, 8, 7, 43, 1, 2, 30, 176, 232, 210], [50, 48, 1, 2, 39, 0, 2, 28, 2, 1, 40, 0, 2, 31, 0, 5, 39, 1, 4, 37, 3, 3, 36, 5, 0, 35, 1, 1, 39, 1, 2, 32, 3, 2, 40, 1, 2, 62, 63, 42, 58, 7, 8, 7, 44, 1, 2, 30, 176, 4, 226], [53, 49, 1, 2, 39, 0, 2, 28, 2, 1, 40, 0, 2, 31, 0, 5, 39, 1, 4, 37, 3, 3, 36, 5, 0, 35, 1, 1, 39, 1, 2, 32, 3, 2, 40, 1, 2, 63, 64, 43, 58, 7, 9, 7, 45, 1, 2, 30, 177, 27, 244], [53, 49, 1, 2, 39, 0, 2, 28, 2, 1, 40, 0, 2, 32, 0, 5, 39, 1, 4, 37, 3, 3, 36, 5, 0, 36, 1, 1, 39, 1, 2, 32, 3, 2, 40, 1, 2, 64, 64, 43, 59, 7, 9, 7, 45, 1, 2, 31, 178, 45, 0], [54, 50, 1, 2, 39, 0, 2, 28, 2, 1, 41, 0, 2, 32, 0, 5, 39, 1, 4, 37, 3, 3, 36, 5, 0, 36, 1, 1, 39, 1, 2, 33, 3, 2, 40, 1, 2, 64, 64, 43, 60, 7, 9, 7, 46, 1, 2, 32, 178, 68, 19], [55, 50, 1, 2, 39, 0, 2, 30, 2, 1, 41, 0, 2, 33, 0, 5, 40, 1, 4, 37, 3, 3, 36, 5, 0, 36, 1, 1, 39, 1, 2, 33, 3, 2, 41, 1, 2, 65, 65, 43, 61, 7, 9, 7, 47, 1, 2, 32, 180, 109, 37], [55, 50, 1, 2, 39, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 5, 40, 1, 4, 37, 3, 3, 36, 5, 0, 36, 1, 1, 39, 1, 2, 33, 3, 2, 41, 1, 2, 65, 65, 43, 62, 7, 9, 7, 47, 1, 2, 32, 182, 132, 67], [55, 50, 1, 2, 39, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 5, 40, 1, 4, 37, 3, 3, 38, 5, 0, 36, 1, 1, 39, 1, 2, 33, 3, 2, 42, 1, 2, 65, 66, 43, 62, 7, 9, 7, 47, 1, 2, 32, 184, 160, 85], [55, 50, 1, 2, 39, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 5, 40, 1, 4, 37, 3, 3, 38, 5, 0, 36, 1, 1, 39, 1, 2, 34, 3, 2, 42, 1, 2, 65, 66, 43, 63, 7, 9, 7, 48, 1, 2, 32, 187, 181, 103], [56, 50, 1, 2, 40, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 5, 41, 1, 4, 37, 3, 3, 38, 5, 0, 36, 1, 1, 39, 1, 2, 35, 3, 2, 43, 1, 2, 67, 66, 43, 64, 7, 9, 7, 49, 1, 2, 32, 189, 201, 117], [56, 50, 1, 2, 42, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 5, 42, 1, 4, 37, 3, 3, 39, 5, 0, 36, 1, 1, 39, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 43, 64, 7, 9, 7, 50, 1, 2, 32, 190, 220, 139], [56, 50, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 37, 3, 3, 39, 5, 0, 36, 1, 1, 39, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 44, 64, 7, 9, 7, 51, 1, 2, 32, 190, 248, 151], [56, 52, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 51, 1, 2, 32, 192, 10, 169], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174], [57, 53, 1, 2, 43, 0, 2, 31, 2, 1, 41, 0, 2, 33, 0, 6, 43, 1, 4, 38, 3, 3, 39, 5, 0, 37, 1, 1, 40, 1, 2, 35, 3, 2, 43, 1, 2, 67, 67, 45, 64, 7, 9, 7, 52, 1, 2, 32, 193, 19, 174]], "other_register_err_names": ["FCtrl_Global_lock_count", "FCtrl_Global_unassigned_fcmd_count", "FCtrl_Global_fc_error_fcmd_count", "ClocksAndResets_Global_pusm_left_ready_action_counter", "ClocksAndResets_Global_lock_filter_loss_of_lock_count", "RocDaqCtrl_Global_error_flags_unused_state", "RocDaqCtrl_Global_error_flags_bunch_counter", "FormatterBuffer_Global_error_count_format", "FormatterBuffer_Global_error_count_hamming", "FormatterBuffer_Global_error_count_pass_thru"], "other_register_err_cnts": [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "daq_asic_post_beam": [[1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655424, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431688448], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1432179968, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431786752, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431590144, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655682, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431639296, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655808], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655424], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431656192, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431654656], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431663872, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431786752, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1968526592, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431657728, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1440044288, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655682, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1440044288, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431639296, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680]], "daq_emu_post_beam": [[1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680]]}, "call": {"duration": 81.47472832000005, "outcome": "failed", "crash": {"path": "/home/HGCAL_dev/SEU_Run/econd-sw/test_radiation/test_proton_seu.py", "lineno": 439, "message": "assert 8 == 0"}, "traceback": [{"path": "test_proton_seu.py", "lineno": 439, "message": "AssertionError"}], "longrepr": "fc = <utils.fastcontrol.FastControl object at 0x7f97b5e128>, sc = <utils.streamcompare.StreamCompare object at 0x7f97bb4f28>\nlc_asic = <utils.linkcapture.LinkCapture object at 0x7f97b5e2b0>, lc_emu = <utils.linkcapture.LinkCapture object at 0x7f97b5e550>\nactive_eTXs = array([ True,  True,  True,  True,  True,  True]), i2c_asic = <econ_i2c.ECON_I2C object at 0x7f97b5ef98>\ni2c_emu = <econ_i2c.ECON_I2C object at 0x7f97b93198>\ni2c_initial = {'Aligner_Global_dbg_fc_cnt': 31, 'Aligner_Global_dbg_fc_cnt_clr': 0, 'Aligner_Global_dbg_lreset_rcvd': 1, 'Aligner_Global_dbg_orbsyn_rcvd': 1, ...}\njson_metadata = {'daq_asic_post_beam': [[1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 1431655...ter', 'ClocksAndResets_Global_lock_filter_loss_of_lock_count', 'RocDaqCtrl_Global_error_flags_unused_state', ...], ...}\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f978a0d30>\n\n    @pytest.mark.order(\"second\")\n    def test_beam_running(\n        fc, sc, lc_asic, lc_emu, active_eTXs, i2c_asic, i2c_emu, i2c_initial, json_metadata, capsys\n    ):\n        with capsys.disabled():\n            print()\n            print(\"Beam Running\")\n    \n        # Configure Stream Compare\n        sc.set_trigger(False)\n        active_eTXs_asic = i2c_asic.read_active_eTx()\n        sc.set_links(active_eTXs_asic, ismap=True)\n    \n        # Configure Link Captures to capture on disagreement\n        nwords = 8\n        for lc in [lc_asic, lc_emu]:\n            # configure LC to capture in extra signal sent by Stream Compare\n            lc.configure(\"extra\", bx=27, nwords=nwords)\n            lc.stop_continous_capture()\n            lc.clear_fifo()\n            lc.aquire(continuous=1)\n    \n        word_err_count = []\n        tmr_count = []\n        other_registers_cnt = []\n        initial = time.time()\n        with capsys.disabled():\n            print(\n                \"Starting Stream Compare:  Use CTRL-C to interupt and start register comparison\"\n            )\n    \n        # Reset counters and start triggering on disagreements\n        sc.set_trigger(True)\n        sc.reset_counters()\n    \n        # FIFO occupancy at which we read the fifo\n        occ_threshold_to_read = 5000\n        # Threshold of (err_counts/word_counts) at which to stop the test\n        ratio_threshold_to_stop = 1.2\n    \n        tmr_names = i2c_asic.read(\n            config_to_monitor, minimal_convert_read=True, convert_read=False\n        ).keys()\n        other_registers_names = i2c_asic.read(\n            other_registers, minimal_convert_read=True, convert_read=False\n        ).keys()\n        with capsys.disabled():\n            print(f'tmr_names: {\",\".join(list(tmr_names))}')\n            print(f'other_registers_names: {\",\".join(list(other_registers_names))}')\n    \n        num_reads = 0\n        try:\n            while True:\n                # print counters every second\n                sleep(1)\n                fc.send_sequence(periodic=False, length=len(fc_sequence))\n    \n                num_reads = num_reads + 1\n                curr_time = datetime.now()\n                timestamp = curr_time.strftime(\"%Y-%m-%d %H:%M:%S.%f\")\n                # now = time.time()\n                # elapsed = now - initial\n    \n                sc.latch_counters()\n    #            sc.set_trigger(False)\n                word_count, err_count = sc.read_both_counters()\n                to_print = f\"{timestamp} Word Count: {word_count}, Error Count: {err_count}\"\n                with capsys.disabled():\n                    pprint(to_print)\n    \n                word_err_count.append(\n                    [timestamp, word_count, err_count]\n                )\n    \n                # read fifo occupancy\n                occupancies = lc_asic.read_occupancy()\n                if np.all(occupancies > occ_threshold_to_read):\n                    # assumes that both the ASIC and emulator have captured the same number of words\n                    daq_asic = lc_asic.read_fifo(\n                        print_hex=False, file_name=None, nwords=occupancies[0]\n                    )\n                    daq_emu = lc_emu.read_fifo(\n                        print_hex=False, file_name=None, nwords=occupancies[0]\n                    )\n                    # print_differences(\n                    #    daq_asic, daq_emu, i2c_asic, i2c_emu, active_eTXs, capsys\n                    # )\n                    json_metadata.update(\n                        {\n                            f\"daq_asic_at_beam_{num_reads}\": daq_asic.tolist(),\n                            f\"daq_emu_at_beam_{num_reads}\": daq_emu.tolist(),\n                        }\n                    )\n    \n                # check counters\n                tmr_errors = i2c_asic.read(\n                    config_to_monitor, minimal_convert_read=True, convert_read=False\n                ).values()\n                tmr_count.append(list(tmr_errors))\n                other_registers_errors = i2c_asic.read(\n                    other_registers, minimal_convert_read=True, convert_read=False\n                ).values()\n                other_registers_cnt.append(list(other_registers_errors))\n                tmr_str = \" \".join([f\"{x:02x}\" for x in tmr_errors])\n                other_registers_str = \" \".join([f\"{x:02x}\" for x in other_registers_errors])\n                with capsys.disabled():\n                    print(f\"tmr_err_cnt: {tmr_str}\")\n                    print(f\"other register errors: {other_registers_str}\")\n    \n                 # if error count is too high, stop\n                if err_count / word_count > ratio_threshold_to_stop:\n                    with capsys.disabled():\n                        print(\n                            f\"Stopping. Fraction of errors is too high {err_count/word_count}\"\n                        )\n                    break\n    \n        except KeyboardInterrupt:\n            with capsys.disabled():\n                print(\"Stopping\")\n    \n        # Latch and reset counters and stop triggering on disagreements\n        sc.latch_counters()\n        sc.set_trigger(False)\n        sc.reset_counters()\n    \n        json_metadata[\"word_err_count\"] = word_err_count\n        json_metadata[\"tmr_err_names\"] = list(tmr_names)\n        json_metadata[\"tmr_err_cnts\"] = tmr_count\n        json_metadata[\"other_register_err_names\"] = list(other_registers_names)\n        json_metadata[\"other_register_err_cnts\"] = other_registers_cnt\n        occupancies = lc_asic.read_occupancy()\n        if np.any(occupancies !=0 ):\n        # assumes that both the ASIC and emulator have captured the same number of words\n            daq_asic = lc_asic.read_fifo(\n                print_hex=False, file_name=None, nwords=occupancies[0]\n            )\n            daq_emu = lc_emu.read_fifo(\n                print_hex=False, file_name=None, nwords=occupancies[1]\n            )\n            print_differences(\n                daq_asic, daq_emu, i2c_asic, i2c_emu, active_eTXs, capsys\n            )\n            json_metadata.update(\n                {\n                    f\"daq_asic_post_beam\": daq_asic.tolist(),\n                    f\"daq_emu_post_beam\": daq_emu.tolist(),\n                }\n            )\n    \n    \n>       assert err_count == 0\nE       assert 8 == 0\n\ntest_proton_seu.py:439: AssertionError"}, "teardown": {"duration": 0.0026200840000001335, "outcome": "passed"}}, {"nodeid": "test_proton_seu.py::test_postbeam_checks", "lineno": 441, "outcome": "failed", "keywords": ["test_postbeam_checks", "pytestmark", "order", "test_proton_seu.py", "test_radiation"], "setup": {"duration": 0.008850283999890962, "outcome": "passed"}, "metadata": {"initial_read": [], "daq_asic_after_beam": [], "daq_emu_after_beam": [], "register_differences": [], "snapshots": [], "snapshot_dvs": [], "pattern_matchs": [], "selects": []}, "call": {"duration": 2.228381926000111, "outcome": "failed", "crash": {"path": "/home/HGCAL_dev/SEU_Run/econd-sw/test_radiation/test_proton_seu.py", "lineno": 531, "message": "AssertionError: assert ({'Aligner_Global_tmr_err_cnt_aligner': 17, 'ChAligner_00_tmr_err_cnt_chan_aligner': 16, 'ChAligner_00_tmr_err_cnt_chan_eprxgrp': 1, 'ChAligner_01_tmr_err_cnt_chan_aligner': 21, ...} == None or {'Aligner_Glo...ner': 21, ...} == {}\n  Left contains 37 more items:\n  {'Aligner_Global_tmr_err_cnt_aligner': 17,\n   'ChAligner_00_tmr_err_cnt_chan_aligner': 16,\n   'ChAligner_00_tmr_err_cnt_chan_eprxgrp': 1,\n   'ChAligner_01_tmr_err_cnt_chan_aligner': 21,\n   'ChAligner_01_tmr_err_cnt_chan_eprxgrp': 4,\n   'ChAligner_01_tmr_err_cnt_chan_err': 1,...\n  \n  ...Full output truncated (33 lines hidden), use '-vv' to show)"}, "traceback": [{"path": "test_proton_seu.py", "lineno": 531, "message": "AssertionError"}], "longrepr": "fc = <utils.fastcontrol.FastControl object at 0x7f97b5e128>, sc = <utils.streamcompare.StreamCompare object at 0x7f97bb4f28>\nlc_asic = <utils.linkcapture.LinkCapture object at 0x7f97b5e2b0>, lc_emu = <utils.linkcapture.LinkCapture object at 0x7f97b5e550>\ni2c_initial = {'Aligner_Global_dbg_fc_cnt': 31, 'Aligner_Global_dbg_fc_cnt_clr': 0, 'Aligner_Global_dbg_lreset_rcvd': 1, 'Aligner_Global_dbg_orbsyn_rcvd': 1, ...}\ni2c_asic = <econ_i2c.ECON_I2C object at 0x7f97b5ef98>, CfgConverterD = <econ_tools.swamp.cfgconverter.CfgConverter object at 0x7f97b5e860>\njson_metadata = {'daq_asic_after_beam': [[1431655680, 1431655680, 1431655680, 1431655680, 1431655680, 1431655680], [1431655680, 143165...er_buffer: 0', 'FormatterBuffer_Global_error_count_pass_thru: 0', ...], 'pattern_matchs': [1, 1, 1, 1, 1, 1, ...], ...}\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f97502860>\n\n    @pytest.mark.order(\"third\")\n    def test_postbeam_checks(\n        fc, sc, lc_asic, lc_emu, i2c_initial, i2c_asic, CfgConverterD, json_metadata, capsys\n    ):\n        ## Calls the initial reading of registers\n        read_ASIC_old = i2c_initial\n        var = []\n        for key in read_ASIC_old:\n            var.append(f\"{key}: {read_ASIC_old[key]}\")\n    \n        ## Reads the registers again after radiation\n        full_config_bytes = i2c_asic.read_all()\n        read_ASIC_new = CfgConverterD.bytes_to_ECON_dict(full_config_bytes)\n    \n        ## Calculates the register changes before and after radiation\n        d = diff_dict(read_ASIC_old, read_ASIC_new)\n        json_metadata[\"initial_read\"] = var\n    \n        ## Capturing another 4095 words on L1A\n        nwords = 4095\n        for lc in [lc_asic, lc_emu]:\n            lc.configure(\"SPARE_1\", bx=0, verbose=False, nwords=nwords)\n            lc.stop_continous_capture()\n            lc.clear_fifo()\n            lc.aquire(continuous=0)\n    \n    \n        fc.send_sequence(periodic=False, length=len(fc_sequence))\n    \n        json_metadata.update(\n            {\n                \"daq_asic_after_beam\": lc_asic.read_fifo(\n                    print_hex=False, file_name=None, nwords=nwords\n                ).tolist(),\n                \"daq_emu_after_beam\": lc_emu.read_fifo(\n                    print_hex=False, file_name=None, nwords=nwords\n                ).tolist(),\n            }\n        )\n    \n        ## Print Register Differences\n        temp = \"===>\"\n        before = \"Before\"\n        after = \"After\"\n        register = \"Register Changes\"\n        register_changes = []\n        for i in range(12):\n            if f\"ChAligner_0{i}_hdr_mm_cntr\" in d:\n                d.pop(f\"ChAligner_0{i}_hdr_mm_cntr\")\n            if i > 9:\n                if f\"ChAligner_{i}_hdr_mm_cntr\" in d:\n                    d.pop(f\"ChAligner_{i}_hdr_mm_cntr\")\n    \n        wb_error_change = (\n            read_ASIC_new[\"Misc_Global_wbmaster_err_wb_adr_cnt\"]\n            - read_ASIC_old[\"Misc_Global_wbmaster_err_wb_adr_cnt\"]\n        ) % 256\n    \n        if wb_error_change == 152:\n            d.pop(\"Misc_Global_wbmaster_err_wb_adr_cnt\")\n    \n        with capsys.disabled():\n            if d:\n                print(f\"{register: <35}: {before: ^6} {temp: ^5} {after: ^6} \")\n                for key in d:\n                    print(\n                        f\"{key: <35}: {read_ASIC_old[key]: ^6} {temp: ^5} {read_ASIC_new[key]: >5}\"\n                    )\n    \n            else:\n                print(\"No difference between ASIC before and after configuration\")\n    \n        ## take I2C snapshot\n        snapshots, snapshot_dvs, pattern_matchs, selects = i2c_asic.snapshot_read()\n    \n        var2 = []\n        for key in d:\n            var2.append(f\"{key}: {d[key]}\")\n        json_metadata[\"register_differences\"] = var2\n        json_metadata.update(\n            {\n                \"snapshots\": list(snapshots),\n                \"snapshot_dvs\": list(snapshot_dvs.astype(object)),\n                \"pattern_matchs\": list(pattern_matchs.astype(object)),\n                \"selects\": list(selects),\n            }\n        )\n    \n        # assert no differences\n>       assert d == None or d == {}\nE       AssertionError: assert ({'Aligner_Global_tmr_err_cnt_aligner': 17, 'ChAligner_00_tmr_err_cnt_chan_aligner': 16, 'ChAligner_00_tmr_err_cnt_chan_eprxgrp': 1, 'ChAligner_01_tmr_err_cnt_chan_aligner': 21, ...} == None or {'Aligner_Glo...ner': 21, ...} == {}\nE         Left contains 37 more items:\nE         {'Aligner_Global_tmr_err_cnt_aligner': 17,\nE          'ChAligner_00_tmr_err_cnt_chan_aligner': 16,\nE          'ChAligner_00_tmr_err_cnt_chan_eprxgrp': 1,\nE          'ChAligner_01_tmr_err_cnt_chan_aligner': 21,\nE          'ChAligner_01_tmr_err_cnt_chan_eprxgrp': 4,\nE          'ChAligner_01_tmr_err_cnt_chan_err': 1,...\nE         \nE         ...Full output truncated (33 lines hidden), use '-vv' to show)\n\ntest_proton_seu.py:531: AssertionError"}, "teardown": {"duration": 0.04485868400001891, "outcome": "passed"}}], "warnings": []}